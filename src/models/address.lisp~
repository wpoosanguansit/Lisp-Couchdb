(in-package :careerpacific)

(defclass address ()  
  ((id              :initarg :id
	            :initform nil
	            :accessor id)
   (rev             :initarg :rev
	            :initform nil
	            :accessor rev)
   (user            :initarg :user
	            :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":user must be provided.")
		    :accessor user)
   (address-type    :initarg :address-type
	            :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address-type initial argument"
				     :reason ":apartment-type must be provided.")
	            :accessor address-type)
   (apartment-number :initarg :apartment-number
		    :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":apartment-number must be provided.")
		    :accessor apartment-number)  
   (street          :initarg :street
		    :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":street must be provided.")
		    :accessor street)
   (city            :initarg :city
		    :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":city must be provided.")
		    :accessor city)
   (country         :initarg :country
		    :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":country must be provided.")
		    :accessor country)
   (zipcode         :initarg :zipcode
		    :initform (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason ":zipcode must be provided.")
		    :accessor zipcode)
   (status          :initarg :status
	            :initform "active"
	            :accessor status)
   (created-date    :initarg :created-date
	            :initform (funcall #'get-today-date)
	            :reader created-date)
   (updated-date    :initarg :updated-date
	            :initform (funcall #'get-today-date)
	            :accessor updated-date)
   (dirty-marker    :initarg :dirty-marker
		    :initform t
		    :accessor dirty-marker)))

;;this is for the validation of the data

(defmethod initialize-instance :after ((self address) &rest args)
  (if (not (and (eql 'user (type-of (user self)))
		    (persisted-object-p (user self))))
      (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason "user has to be string or peristed user object"))
  (if (not (member (status self) *valid-object-status* :test #'string-equal)) 
      (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address initial argument"
				     :reason "status passed is not valid string : ~a. it has to be one 
                                      of these values : ~{~a~^, ~}" (status self) *valid-object-status*))
  (if (not (stringp (address-type self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "address-type has to be string"))
  (if (not (stringp (apartment-number self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "apartment-number has to be string"))
  (if (not (stringp (street self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "street has to be string"))
  (if (not (stringp (city self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "city has to be string"))
  (if (not (stringp (country self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "country has to be string"))
  (if (not (stringp (zipcode self)))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address initial argument"
	     :reason "zipcode has to be string"))
  (if (not (id self))
      (setf (id self) (generate-unique-id (id (user self)) "address"))))


;;immutable slot

;(defmethod (setf created-date) :before (value (self address))
;  (error 'careerpacific-illegal-operation-error
;	 :error-number 3001 :error-type "address illegal setf"
;	 :reason "created-date is immutable, it can not be setf"))

;;check the arguments

(defmethod (setf id) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason "id has to be string. 
                                      it has to be in the format \"user@email.com_address_1\"")))

(defmethod (setf rev) :before (value (self address))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason "rev has to be string")))


(defmethod (setf user) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (and (eql 'user (type-of value))
		    (persisted-object-p value)))
      (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address setf argument"
				     :reason "user has to be string or persisted user object")))
(defmethod (setf address-type) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "address-type passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf apartment-number) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))  
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "apartment-number passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf street) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
				     :error-number 2001 :error-type "address setf argument"
				     :reason (format nil "street passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf city) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "city passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf country) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "country passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf zipcode) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (stringp value))
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "zipcode passed : ~a is not valid, 
                                      it has to be string" value))))

(defmethod (setf status) :before (value (self address))
  (if (deleted-persisted-object-p self)
      (error 'careerpacific-illegal-operation-error
	     :error-number 3002 :error-type "address illegal setf"
	     :reason "object is deleted, it can not be setf"))
  (if (not (member value *valid-object-status* :test #'string-equal)) 
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "status passed is not valid string : ~a. it has to be one 
                                      of these values : ~{~a~^, ~}" value *valid-object-status*))))

(defmethod (setf updated-date) :before (value (self address))
  (if (not (stringp value)) 
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "updated-date passed : ~a  is not a valid value. 
              it has to be a date" value))))

(defmethod (setf dirty-marker) :before (value (self address))
  (if (not (member value '(nil t))) 
      (error 'careerpacific-invalid-arguments-error
	     :error-number 2001 :error-type "address setf argument"
	     :reason (format nil "dirty-marker passed : ~a  is not a valid value. it has to be one                                       of nil or t" value))))

;;this method check the values being set and set the dirty-marker to t when setf is called

(defmethod (setf id) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf rev) :after (value (self address))
  (setf (dirty-marker self) t))


(defmethod (setf user) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf address-type) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf apartment-number) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf street) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf city) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf country) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf zipcode) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf status) :after (value (self address))
  (setf (dirty-marker self) t))

(defmethod (setf updated-date) :after (value (self address))
  (setf (dirty-marker self) t))

;;methods accessing the slots

(defmethod user :before ((self address))
  )